// i/p = 0->1->2->3->4->5 , k=2
//k=+ve/-ve shift forward/backward
// o/p = 4->5->0->1->2->3 if k=2
//o/p = 2->3->4->5->0->1 if k=-2
// Time complexity = O(n) space complexity = O(1)


import java.util.*;

class Program {
  public static LinkedList shiftLinkedList(LinkedList head, int k) {
    // Write your code here.
    LinkedList currentNode = head;
    int length = 1;
    int position_new_tail = 0;
    while(currentNode.next != null){
      currentNode = currentNode.next;
      length++;
    }
    int offset = Math.abs(k)%length;
    if(offset==0)
      return head;
    position_new_tail = k > 0? length-offset : offset;
    LinkedList new_tail = head;
    for(int i = 1;i < position_new_tail;i++){
      new_tail = new_tail.next;
    }
    LinkedList new_head = new_tail.next;
    new_tail.next = null;
    currentNode.next = head;
    return new_head;
  }

  static class LinkedList {
    public int value;
    public LinkedList next;

    public LinkedList(int value) {
      this.value = value;
      next = null;
    }
  }
}
