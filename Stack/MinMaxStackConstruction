//Push pop peek operations of stack and return min & max values of stack at any given point of time
///push(5)
//getMin() -5
//getMax() -5
//push(7)
//getMin() -5
//getMax() -7
//push(2)
//getMin() -2
//getMax() -7
//pop() -2
//pop() -7
//getMin() -5
//getMax() -5
//getPeek() -5
//TimeComplexity - O(1)
//Space Complexity -O(1)

import java.util.*;

class Program {
  // Feel free to add new properties and methods to the class.
  static class MinMaxStack {
    List<Integer> stack = new ArrayList<Integer>();
    List<Map<String,Integer>> minMaxStack = new ArrayList<Map<String,Integer>>();
    public int peek() {
      // Write your code here.
      
      return stack.get(stack.size()-1);
    }

    public int pop() {
      // Write your code here.
      minMaxStack.remove(minMaxStack.size()-1);
      return stack.remove(stack.size()-1);
    }

    public void push(Integer number) {
      // Write your code here.
      Map<String,Integer> newminMaxMap = new HashMap<>();
      newminMaxMap.put("min",number);
      newminMaxMap.put("max",number);
      if(minMaxStack.size()>0){
        Map<String,Integer> lastminMaxMap = new HashMap<>(minMaxStack.get(minMaxStack.size()-1));
        newminMaxMap.replace("min",Math.min(lastminMaxMap.get("min"),number));
        newminMaxMap.replace("max",Math.max(lastminMaxMap.get("max"),number));
      }
      minMaxStack.add(newminMaxMap);
      stack.add(number);
    }

    public int getMin() {
      // Write your code here.
      return minMaxStack.get(minMaxStack.size()-1).get("min");
    }

    public int getMax() {
      // Write your code here.
      return minMaxStack.get(minMaxStack.size()-1).get("max");
    }
  }
}
